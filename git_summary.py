# git merge 방법이 4개인 이유
# 1. 불필요한 커밋을 줄이기 위해
# 2. 브랜치 정리를 위해
# 3. 커밋 히스토리를 깔끔하게 유지하기 위해
# 4. 협업 시 충돌을 최소화하기 위해

# merge 방법
# 1. Fast-forward merge
#  - 브랜치가 직선적으로 이어지는 경우, 커밋 히스토리가 깔끔하게 유지됨
#  - 브랜치가 병합된 후, 커밋 히스토리가 단순해짐
# 2. Three-way merge
#  - 브랜치가 병합될 때, 두 브랜치의 공통 조상을 찾아 병합함
#  - 커밋 히스토리가 복잡해질 수 있지만, 브랜치의 변경 사항을 모두 반영할 수 있음
# 3. Squash merge
#  - 여러 개의 커밋을 하나로 합쳐서 병합함
#  - 커밋 히스토리를 깔끔하게 유지할 수 있음
#  - 브랜치가 병합된 후, 커밋 히스토리가 단순해짐
# 4. Rebase merge
#  - 브랜치의 커밋을 다른 브랜치의 커밋 위로 옮겨서 병합함
#  - 커밋 히스토리를 깔끔하게 유지할 수 있음
#  - 브랜치가 병합된 후, 커밋 히스토리가 단순해짐

# Three-way merge
# - 공통 조상, 현재, 병합대상 브랜치를 비교하여 충돌을 표시하거나 병합함
# - 새로운 커밋을 생성하여 병합 결과를 기록함
# - 병합된 내용의 커밋의 내용이 생성된다
# target 브랜치에 병합된 내용이 전부 달라붙는다 
# 문제점 : 커밋 히스토리도 복잡해지고, 커밋이 많아져서 히스토리가 지저분해질 수 있다

# squash merge
# - 여러 개의 커밋을 하나로 합쳐서 병합함
# - 커밋 히스토리를 깔끔하게 유지할 수 있음
# target 브랜치에 병합된 내용이 따라가지 않는다
# - 브랜치가 병합된 후, 커밋 히스토리가 단순해짐

# 사용 상황 : 기능 개발이 완료된 후, 해당 브랜치를 병합할 때 사용
# 사용 목적 : 커밋 히스토리를 깔끔하게 유지하고, 불필요한 커밋을 줄이기 위해

# 공통조상이란? 
# 두 브랜치가 공통으로 가지고 있는 조상 커밋을 의미함
# 공통조상은 두 브랜치가 분기된 지점의 커밋을 의미함

# rebase
# 나의 조상을 재설정하겠다
# 현재 브랜치의 커밋을 다른 브랜치의 커밋 위로 옮겨서 병합함
# 쓰는 이유는?
# 커밋 히스토리를 깔끔하게 유지할 수 있음
# 브랜치가 병합된 후, 커밋 히스토리가 단순해짐
# 사용 상황 : 기능 개발이 완료된 후, 해당 브랜치를 병합할 때 사용
# 사용 목적 : 커밋 히스토리를 깔끔하게 유지하고, 불필요한 커밋을 줄이기 위해
# rebase는 커밋 히스토리를 변경하는 작업이므로, 주의해서 사용해야 함

#fetch
# fetch는 원격 저장소의 변경 사항을 로컬 저장소로 가져오는 작업
# pull과의 차이점
# pull은 fetch와 merge를 동시에 수행하는 작업
# fetch는 원격 저장소의 변경 사항을 로컬 저장소로 가져오기만 하고, 로컬 브랜치에는 반영하지 않음
# fetch를 사용하면, 원격 저장소의 변경 사항을 확인하고, 로컬 브랜치에 반영할지 결정할 수 있음

# 작업단위 : 브랜치 and 브랜치
# 브랜치 단위로 작업을 진행하고, 작업이 완료되면 병합하는 방식

# remote url 설정하는법
# git remote add origin <원격 저장소 URL>
